<%- include('../admin-partials/header') %>

  <link rel="stylesheet" href="/css/admin_css/products.css">

  <title>Products - Aniyara</title>



  <!-- Products Page -->
  <div id="products-page" class="main-content page hidden-pages">
    <div class="header">
      <h1 class="page-title">Products Management</h1>
      <div class="search-bar">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#64748b"
          stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
        <input type="text" placeholder="Search products...">
      </div>
    </div>

    <div class="filters">
      <div class="filter-group">
        <select class="filter-select" id="category-filter">
          <option>All Categories</option>
          <option>Chain</option>
          <option>Bracelate</option>
          <option>Earings</option>
          <option>consmetis</option>
          <option>Watches</option>
          <option>Necklace</option>
          <option>Rings</option>
          <option>Gents Items</option>
          <option>Toys</option>
          <option>Perfumes</option>
          <option>Decorations</option>
        </select>

        <!-- Added id="stock-filter" -->
        <select class="filter-select" id="stock-filter">
          <option>All Stock Status</option>
          <option>In Stock</option>
          <option>Low Stock</option>
          <option>Out of Stock</option>
        </select>

        <!-- Added id="sort-filter" -->
        <select class="filter-select" id="sort-filter">
          <option>Sort By: Latest</option>
          <option>Sort By: Price (Low to High)</option>
          <option>Sort By: Price (High to Low)</option>
          <option>Sort By: Most Popular</option>
        </select>
      </div>
      

      <button class="btn" id="openModalBtn">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
          stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="12" y1="5" x2="12" y2="19"></line>
          <line x1="5" y1="12" x2="19" y2="12"></line>
        </svg>
        Add New Product
      </button>
    </div>



    <div class="products-grid" id="productListContainer">
      <p>empty</p>




    </div>


    <!-- pagination -->


    <div class="pagination" id="pagination">
      current page appears here
    </div>





  </div>




  <!-- Add New Product Modal - Hidden by default -->

  <div class="modal-overlay" id="productModal">
    <div class="modal">
      <div class="modal-header">
        <h2 class="modal-title">Add New Product</h2>
        <button class="close-button" id="closeModalBtn">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"
            stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
      <div class="modal-body">
        <form id="add-product-form">
          <div class="form-group">
            <label for="product-name">Product Name</label>
            <input type="text" id="product-name" class="form-control" required>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="product-price">Price ($)</label>
              <input type="number" id="product-price" class="form-control" step="0.01" min="0" required>
            </div>
            <div class="form-group">
              <label for="product-stock">Stock Quantity</label>
              <input type="number" id="product-stock" class="form-control" min="0" required>
            </div>
          </div>

          <div class="form-group">
            <label for="product-category">Category</label>
            <select id="product-category" class="form-control" required>
              <option value="">Select a category</option>
              <option value="Chain">Chain</option>
              <option value="Bracelate">Bracelate</option>
              <option value="Earings">Earings</option>
              <option value="consmetis">consmetis</option>
              <option value="Watches">Watches</option>
              <option value="Necklace">Necklace</option>
              <option value="Rings">Rings</option>
              <option value="Gents_items">Gents Items</option>
              <option value="Toys">Toys</option>
              <option value="Perfumes">Perfumes</option>
              <option value="Decorations">Decorations</option>
            </select>
          </div>

          <div class="form-group">
            <label for="product-description">Description</label>
            <textarea id="product-description" class="form-control"></textarea>
          </div>

          <div class="form-group">
            <label>Product Image</label>
            <input type="file" id="product-image" accept="image/*" style="display:none;">
            <div class="image-upload" id="upload-container">
              <div class="upload-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 24 24" fill="none"
                  stroke="#6b7280" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                  <polyline points="17 8 12 3 7 8"></polyline>
                  <line x1="12" y1="3" x2="12" y2="15"></line>
                </svg>
              </div>
              <p class="upload-text">Drag and drop an image here, or click to browse</p>
              <div class="upload-progress">
                <div class="progress-bar"></div>
              </div>
              <p class="upload-error">Error uploading image. Please try again.</p>
              <p class="upload-success">Image uploaded successfully!</p>
            </div>
            <!-- Image preview area -->
            <div class="image-preview-container" id="preview-container">
              <img src="" alt="Product preview" class="image-preview" id="image-preview">
              <div class="preview-details">
                <span id="image-name">filename.jpg</span>
                <button type="button" class="remove-image" id="remove-image">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none"
                    stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M3 6h18"></path>
                    <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"></path>
                    <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                  </svg>
                  Remove
                </button>
              </div>
            </div>
            <!-- Hidden input to store Cloudinary URL -->
            <input type="hidden" id="image-url" name="imageUrl">
            <input type="hidden" id="image-public-id" name="imagePublicId">
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button class="btn btn-outline" id="cancelModalBtn">Cancel</button>
        <button class="btn btn-primary" type="submit" form="add-product-form" id="submit-product">
          Add Product
        </button>
      </div>
    </div>
  </div>






  <!-- Edit Product Modal - Hidden by default -->
  <div class="modal-overlay" id="editProductModal">
    <div class="modal">
      <div class="modal-header">
        <h2 class="modal-title">Edit Product</h2>
        <button class="close-button" id="closeEditModalBtn">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"
            stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
      <div class="modal-body">
        <form id="edit-product-form" method="PUT" action="/admin/products/edit/:id">
          <!-- Hidden input to store product ID -->
          <input type="hidden" id="edit-product-id">

          <div class="form-group">
            <label for="edit-product-name">Product Name</label>
            <input type="text" id="edit-product-name" class="form-control" required>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="edit-product-price">Price ($)</label>
              <input type="number" id="edit-product-price" class="form-control" step="0.01" min="0" required>
            </div>
            <div class="form-group">
              <label for="edit-product-stock">Stock Quantity</label>
              <input type="number" id="edit-product-stock" class="form-control" min="0" required>
            </div>
          </div>

          <div class="form-group">
            <label for="edit-product-category">Category</label>
            <select id="edit-product-category" class="form-control" required>
              <option value="">Select a category</option>
              <option value="electronics">Electronics</option>
              <option value="furniture">Furniture</option>
              <option value="audio">Audio</option>
              <option value="camera">Camera</option>
              <option value="wearables">Wearables</option>
            </select>
          </div>

          <div class="form-group">
            <label for="edit-product-description">Description</label>
            <textarea id="edit-product-description" class="form-control"></textarea>
          </div>

          <div class="form-group">
            <label>Product Image</label>
            <div class="image-preview" id="current-image-preview">
              <img src="/api/placeholder/300/200" alt="Current product image" id="edit-product-image-preview">
            </div>
            <div class="image-upload" id="edit-image-upload">
              <div class="upload-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 24 24" fill="none"
                  stroke="#6b7280" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                  <polyline points="17 8 12 3 7 8"></polyline>
                  <line x1="12" y1="3" x2="12" y2="15"></line>
                </svg>
              </div>
              <p class="upload-text">Upload new image (optional)</p>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button class="btn btn-outline" id="cancelEditModalBtn">Cancel</button>
        <button class="btn btn-primary" type="submit" form="edit-product-form">
          Save Changes
        </button>
      </div>
    </div>
  </div>






  <script>
    let currentSort = 'latest';
    let currentPage = 1;
    let currentCategory = '';
    let currentStockStatus = '';
    let currentSearchTerm = '';

    const productListContainer = document.getElementById('productListContainer');






    document.addEventListener('DOMContentLoaded', () => {
      // fetching data
      const urlParams = new URLSearchParams(window.location.search);
      currentSort = urlParams.get('sort') || 'latest';
      currentPage = urlParams.get('page') || 1;
      console.log('current sort:', currentSort);
      console.log('current page:', currentPage);

      initializeFromURL();
      initializeFilters();
      fetchProducts(currentPage, currentSort)

    });

    document.querySelectorAll('.pagination-button').forEach(btn => {
      btn.addEventListener('click', (e) => {
        console.log('Pagination clicked:', e.target.dataset.page);
      });
    });



    function initializeFilters() {
      const categoryFilter = document.getElementById('category-filter');
      const stockFilter = document.getElementById('stock-filter');
      const sortFilter = document.getElementById('sort-filter');
      const searchInput = document.querySelector('.search-bar input');

      if (!categoryFilter || !stockFilter || !sortFilter || !searchInput) {
        console.error('Filter elements not found! Check your IDs.');
        return;
      }


      // Category filter change event
      categoryFilter.addEventListener('change', (e) => {
        currentCategory = e.target.value === 'All Categories' ? '' : e.target.value;
        currentPage = 1; // Reset to first page
        applyFilters();
      });

      // stock status
      stockFilter.addEventListener('change', (e) => {
        currentStockStatus = e.target.value === 'All Stock Status' ? '' : e.target.value;
        currentPage = 1; // Reset to first page
        applyFilters();
      });

      // Sort filter change event
      sortFilter.addEventListener('change', (e) => {
        const sortValue = e.target.value;
        switch (sortValue) {
          case 'Sort By: Latest':
            currentSort = 'latest';
            break;
          case 'sort By: Price (Low to High)':
            currentSort = 'price_asc';
            break;
          case 'Sort By: Price (High to Low)':
            currentSort = 'price_desc';
            break;
          case 'sort By: Most Popular':
            currentSort = 'Popular';
            break;
          default:
            currentSort = 'latest';
        }
        currentPage = 1; // Reset to first page
        applyFilters();
      });



      // search input debounce 

      let searchTimeout;
      searchInput.addEventListener('input', (e) => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          currentSearchTerm = e.target.value.trim();
          currentPage = 1
          applyFilters();
        }, 300);
      });
      console.log('Filters initialized successfully!');
    }


    // Apply all current filters

    function applyFilters() {
      fetchProducts(currentPage, currentSort, currentCategory, currentStockStatus, currentSearchTerm);
      updateURL();
      
    }



    async function fetchProducts(page = 1, sort = 'latest', category = '', stockStatus = '', searchTerm = '') {
      try {
        document.getElementById('preloader').style.display = 'flex';
        console.log('Fetching products with filters:', { page, sort, category, stockStatus, searchTerm });

        const params = new URLSearchParams({
          page: page,
          sort: sort
        });

        if (category) params.append('category', category);
        if (stockStatus) params.append('stockStatus', stockStatus);
        if (searchTerm) params.append('search', searchTerm);



        const response = await axios.get(`/admin/productFetch?${params.toString()}`);
        console.log('response:', response);
        const data = response.data;

        if (data.success) {
          renderProducts(data.products);
          currentPage = data.currentPage;
          renderPagination(data.currentPage, data.totalPages);

          updateResultsCount(data.products.length, data.totalProducts)
        } else {
          console.log('error fetching products fron fetch Products function', data);
          showError('Failed to fetch products')
        }

      } catch (error) {
        console.log('error fetching products form fetch products function', error);
        showError('Failed to load products. Please try again.')
      }
      finally {
        setTimeout(() => {
          document.getElementById('preloader').style.display = 'none';

        }, 500);
      }
    }

    function updateURL() {
      const params = new URLSearchParams();

      if (currentPage > 1) params.set('page', currentPage);
      if (currentSort !== 'latest') params.set('sort', currentSort);
      if (currentCategory) params.set('category', currentCategory);
      if (currentStockStatus) params.set('stockStatus', currentStockStatus);
      if (currentSearchTerm) params.set('search', currentSearchTerm);

      const newURL = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
      window.history.replaceState({}, '', newURL);

    }

    function showError(message) {
      productListContainer.innerHTML = `


        <div class="error-message" style="grid-column: 1/-1; text-align: center; padding: 2rem;">
          <p>${message}</p>
         <button onclick="applyFilters()" class="btn">Retry</button>
        </div>
      `;
    }


    function updateResultsCount(currentCount, totalCount) {
      const header = document.querySelector('.header h1');
      const countText = totalCount > 0 ?
        `Products Management (${currentCount} of ${totalCount})` :
        'Products Management (No results)';
      header.textContent = countText;
    }



    
    


    // render products card 
    function renderProducts(products) {


      if (products.length === 0) {

        return;
      }
      productListContainer.innerHTML = '';
      products.forEach(product => {
        const card = document.createElement('div');
        card.classList.add('customer-card');
        card.innerHTML = `
        <div class="product-card">
           <img src="${product.image.url || '/api/placeholder/300/200'}" alt="Product" class="product-card-img">
          <div class="product-card-body">
            <h3 class="product-card-title">${product.name}
            </h3>
            <div class="product-card-price"> ₹ ${product.price}
            </div>
            <div class="product-card-stock"> In Stock: ${product.stock}
            </div>
            <div class="product-card-actions">
              <button class="btn btn-sm edit-product-btn" data-id="${product._id}">Edit</button>
              <button class="btn btn-sm btn-danger delete-product-btn" data-id="${product._id}">Delete</button>
            </div>
          </div>
        </div>
        `;
        productListContainer.appendChild(card);


      });



    }


    // Function to handle pagination clicks for search results
    function handlePageChange(page) {
      currentPage = page;
      applyFilters();
    }

    function initializeFromURL() {
      const urlParams = new URLSearchParams(window.location.search);

      currentSort = 'latest';
      currentPage = parseInt(urlParams.get('page')) || 1;
      currentCategory = '';
      currentStockStatus = '';
      currentSearchTerm = '';

      // Update UI elements to match URL parameters
      const categoryFilter = document.getElementById('category-filter');
      const stockFilter = document.getElementById('stock-filter');
      const sortFilter = document.getElementById('sort-filter');
      const searchInput = document.querySelector('.search-bar input');

      if (currentCategory) {
        categoryFilter.value = currentCategory;
      }

      if (currentStockStatus) {
        stockFilter.value = currentStockStatus;
      }

      // Set sort filter based on currentSort value
      switch (currentSort) {
        case 'latest':
          sortFilter.value = 'Sort By: Latest';
          break;
        case 'price_asc':
          sortFilter.value = 'Sort By: Price (Low to High)';
          break;
        case 'price_desc':
          sortFilter.value = 'Sort By: Price (High to Low)';
          break;
        case 'popular':
          sortFilter.value = 'Sort By: Most Popular';
          break;
      }

      if (currentSearchTerm) {
        searchInput.value = currentSearchTerm;
      }
    }


  </script>





  <!-- JavaScript for Modal Functionality -->
  <script src="/js/admin_js/product.js"></script>

  <%- include('../admin-partials/footer') %>